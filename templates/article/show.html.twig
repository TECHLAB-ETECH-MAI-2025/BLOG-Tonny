{% extends 'base.html.twig' %}

{% block title %}{{ article.title }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f5f7fa;
        }
        .article-container {
            background-color: white;
            border-radius: 8px;
        }
        .comments-section {
            background-color: white;
            border-radius: 8px;
        }
        .comments-toggle {
            transition: transform 0.3s ease;
        }
        .comments-toggle.collapsed {
            transform: rotate(-90deg);
        }
        .comments-container-hidden {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }
        .comments-container-visible {
            max-height: 2000px;
            transition: max-height 0.3s ease;
        }
        .back-button {
            display: inline-flex;
            align-items: center;
            transition: transform 0.2s ease;
        }
        .back-button:hover {
            transform: translateX(-3px);
        }
    </style>
{% endblock %}

{% block body %}
<div class="container mx-auto py-6 px-4 max-w-4xl">
    <a href="#" onclick="window.history.back(); return false;" class="back-button text-gray-600 hover:text-blue-500 mb-4 inline-flex items-center">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
        <span class="text-sm">Retour</span>
    </a>

    <article class="article-container p-6 mb-6">
        <header class="article-header border-b border-gray-200 ">
            <h1 class="text-3xl font-bold text-gray-800 mb-2">{{ article.title }}</h1>
            <div class="flex justify-between items-center">
                    <div class="mb-4">
                                {% set colors = [
                                    'bg-purple-100 text-purple-800',
                                    'bg-pink-100 text-pink-800',
                                    'bg-yellow-100 text-yellow-800',
                                    'bg-blue-100 text-blue-800',
                                    'bg-indigo-100 text-indigo-800'
                                ] %}
                                {% for category in article.categories %}
                                    <span class="inline-block {{ colors[loop.index0 % colors|length] }} text-xs px-3 py-1 rounded-lg ">
                                        {{ category.name }}
                                    </span>
                                {% endfor %}
                    </div>
                <span class="text-gray-500 text-sm">Publié le {{ article.createdAt|date("d/m/Y") }}</span>
            </div>
        </header>

        <div class="article-content text-gray-600 leading-relaxed">
            {{ article.content|raw }}
        </div>
    </article>

    <section class="comments-section p-6">
        <div class="flex justify-between items-center ">
            <div class="flex items-center cursor-pointer" id="toggle-comments">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 comments-toggle text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
                <h2 class="text-lg font-semibold text-gray-800">Commentaires <span class="text-gray-500 text-base">({{ article.comments|length }})</span></h2>
            </div>
            <button type="button" class="px-4 py-2 text-sm font-medium bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors shadow-sm" data-bs-toggle="modal" data-bs-target="#commentModal">
                Commenter
            </button>
        </div>

        <div id="comment-alert" class="hidden p-3 mb-3 text-sm rounded" role="alert"></div>

        <div id="comments-container" class="comments-container-visible">
            {% if article.comments|length > 0 %}
                <div class="comments-list space-y-2">
                    {% for comment in article.comments %}
                        <div class="comment-card bg-gray-50 border-l-4 border-l-blue-500 pl-4 py-3 rounded-r">
                            <div>
                                <span class="font-semibold text-gray-800">{{ comment.author }}</span>
                                <span class="text-gray-700">: {{ comment.content }}</span>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            {% else %}
                <div class="no-comments text-center text-gray-500 py-6 bg-gray-50 rounded">
                    <p class="mb-0">Aucun commentaire pour cet article.</p>
                </div>
            {% endif %}
        </div>
    </section>
</div>

<div class="modal fade" id="commentModal" tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-white rounded shadow border-0">
            <div class="modal-header border-b border-gray-100 p-4">
                <h5 class="modal-title text-lg font-semibold text-gray-800" id="commentModalLabel">Ajouter un commentaire</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <form method="post" id="comment-form" class="comment-form">
                    <div class="mb-4">
                        <label for="comment_author" class="block text-sm font-medium text-gray-700 mb-1">Votre nom</label>
                        <input type="text" id="comment_author" name="comment[author]" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:border-blue-500" required>
                    </div>
                    <div class="mb-4">
                        <label for="comment_content" class="block text-sm font-medium text-gray-700 mb-1">Votre commentaire</label>
                        <textarea id="comment_content" name="comment[content]" class="w-full p-2 border border-gray-300 rounded focus:outline-none focus:border-blue-500" rows="3" required></textarea>
                    </div>
                    <input type="hidden" name="article_id" value="{{ article.id }}">
                    <div class="flex justify-end space-x-3">
                        <button type="button" class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors text-sm font-medium" data-bs-dismiss="modal">Annuler</button>
                        <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors text-sm font-medium shadow-sm">
                            Publier
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const commentForm = document.getElementById('comment-form');
            const commentAlert = document.getElementById('comment-alert');
            const toggleComments = document.getElementById('toggle-comments');
            const commentsContainer = document.getElementById('comments-container');
            const commentsToggleIcon = document.querySelector('.comments-toggle');

            // Toggle comments visibility
            toggleComments.addEventListener('click', function() {
                if (commentsContainer.classList.contains('comments-container-visible')) {
                    commentsContainer.classList.remove('comments-container-visible');
                    commentsContainer.classList.add('comments-container-hidden');
                    commentsToggleIcon.classList.add('collapsed');
                } else {
                    commentsContainer.classList.remove('comments-container-hidden');
                    commentsContainer.classList.add('comments-container-visible');
                    commentsToggleIcon.classList.remove('collapsed');
                }
            });

            commentForm.addEventListener('submit', function(event) {
                event.preventDefault();

                const formData = new FormData(this);
                const actionUrl = "{{ path('app_comment_new_for_article', {'id': article.id}) }}";

                // Show loading indication
                const submitBtn = this.querySelector('button[type="submit"]');
                const originalBtnText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<span class="inline-block animate-spin mr-1">⟳</span> Envoi...';
                submitBtn.disabled = true;

                fetch(actionUrl, {
                    method: 'POST',
                    body: formData,
                    credentials: 'same-origin'
                })
                .then(response => {
                    if (response.url.includes('/login')) {
                        throw new Error('Vous devez être connecté pour commenter');
                    }

                    return response.text().then(text => {
                        try {
                            return JSON.parse(text);
                        } catch (e) {
                            if (text.includes('DOCTYPE html')) {
                                throw new Error('Session expirée. Veuillez vous reconnecter.');
                            } else {
                                console.error('Réponse non-JSON:', text);
                                throw new Error('Format de réponse invalide');
                            }
                        }
                    });
                })
                .then(data => {
                    if (data.success) {
                        // Close modal
                        const modalElement = document.getElementById('commentModal');
                        const modal = bootstrap.Modal.getInstance(modalElement);
                        modal.hide();

                        commentAlert.textContent = 'Commentaire ajouté avec succès!';
                        commentAlert.classList.remove('hidden', 'bg-red-100', 'text-red-700');
                        commentAlert.classList.add('bg-green-100', 'text-green-700');

                        // Ensure comments are visible
                        if (commentsContainer.classList.contains('comments-container-hidden')) {
                            commentsContainer.classList.remove('comments-container-hidden');
                            commentsContainer.classList.add('comments-container-visible');
                            commentsToggleIcon.classList.remove('collapsed');
                        }

                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        showError(data.message || 'Erreur lors de l\'ajout du commentaire');
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    showError(error.message || 'Une erreur est survenue lors de l\'envoi du commentaire');
                })
                .finally(() => {
                    // Reset button state
                    submitBtn.innerHTML = originalBtnText;
                    submitBtn.disabled = false;
                });
            });

            function showError(message) {
                commentAlert.textContent = message;
                commentAlert.classList.remove('hidden', 'bg-green-100', 'text-green-700');
                commentAlert.classList.add('bg-red-100', 'text-red-700');
            }
        });
    </script>
{% endblock %}