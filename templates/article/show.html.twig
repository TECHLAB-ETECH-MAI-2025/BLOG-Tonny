{% extends 'base.html.twig' %}

{% block title %}{{ article.title }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .article-header {
            border-bottom: 1px solid #eaeaea;
            margin-bottom: 2rem;
            padding-bottom: 1rem;
        }
        .category-badge {
            font-size: 0.8rem;
            margin-right: 0.5rem;
            color: #666;
        }
        .article-content {
            line-height: 1.6;
        }
        .comment-card {
            border: 1px solid #eaeaea;
            border-radius: 0;
            margin-bottom: 1rem;
        }
        .comment-author {
            font-weight: 500;
        }
        .comment-date {
            color: #666;
            font-size: 0.85rem;
        }
        .comment-count {
            color: #666;
            font-size: 0.9rem;
        }
        .no-comments {
            text-align: center;
            color: #666;
            border: 1px solid #eaeaea;
            padding: 1rem;
        }
        .modal-content {
            border-radius: 0;
            border: 1px solid #eaeaea;
        }
        .back-link {
            color: #333;
            text-decoration: none;
        }
        .alert {
            margin-top: 1rem;
        }
    </style>
{% endblock %}

{% block body %}
<article class="container py-4">
    <header class="article-header">
        <h1 class="mb-2">{{ article.title }}</h1>
        <div class="mb-2">
            <span class="comment-date">Publié le {{ article.createdAt|date("d/m/Y") }}</span>
        </div>
        <div class="mb-2">
            {% for category in article.categories %}
                <span class="category-badge">{{ category.name }}</span>
            {% endfor %}
        </div>
    </header>

    <div class="article-content mb-4">
        {{ article.content|raw }}
    </div>

    <section class="comments my-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h2 class="h6">Commentaires <span class="comment-count">({{ article.comments|length }})</span></h2>
            <button type="button" class="btn btn-sm btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#commentModal">
                Ajouter un commentaire
            </button>
        </div>

        <div id="comment-alert" class="alert d-none" role="alert"></div>

        <div id="comments-container">
            {% if article.comments|length > 0 %}
                <div class="comments-list">
                    {% for comment in article.comments %}
                        <div class="comment-card">
                            <div class="p-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="comment-author">{{ comment.author }}</span>
                                    <span class="comment-date">{{ comment.createdAt|date("d/m/Y") }}</span>
                                </div>
                                <p class="mb-0">{{ comment.content }}</p>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            {% else %}
                <div class="no-comments">
                    <p class="mb-0">Aucun commentaire pour cet article.</p>
                </div>
            {% endif %}
        </div>
        <div class="d-flex justify-content-between border-top pt-3 mt-3">
            <a href="#" onclick="window.history.back(); return false;" class="back-link">Retour</a>
        </div>
    </section>
</article>

<div class="modal fade" id="commentModal" tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-bottom-0">
                <h5 class="modal-title" id="commentModalLabel">Ajouter un commentaire</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4">
                <form method="post" id="comment-form" class="comment-form">
                    <div class="mb-3">
                        <label for="comment_author" class="form-label">Votre nom</label>
                        <input type="text" id="comment_author" name="comment[author]" class="form-control" required>
                    </div>
                    <div class="mb-3">
                        <label for="comment_content" class="form-label">Votre commentaire</label>
                        <textarea id="comment_content" name="comment[content]" class="form-control" rows="3" required></textarea>
                    </div>
                    <input type="hidden" name="article_id" value="{{ article.id }}">
                    <div class="text-end">
                        <button type="button" class="btn btn-sm btn-outline-secondary me-2" data-bs-dismiss="modal">Annuler</button>
                        <button type="submit" class="btn btn-sm btn-secondary">
                            Publier
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const commentForm = document.getElementById('comment-form');
            const commentAlert = document.getElementById('comment-alert');

            commentForm.addEventListener('submit', function(event) {
                event.preventDefault();

                const formData = new FormData(this);
                const actionUrl = "{{ path('app_comment_new_for_article', {'id': article.id}) }}";

                // Show loading indication
                const submitBtn = this.querySelector('button[type="submit"]');
                const originalBtnText = submitBtn.textContent;
                submitBtn.textContent = 'Envoi en cours...';
                submitBtn.disabled = true;

                fetch(actionUrl, {
                    method: 'POST',
                    body: formData,
                    credentials: 'same-origin'
                })
                .then(response => {
                    if (response.url.includes('/login')) {
                        throw new Error('Vous devez être connecté pour commenter');
                    }

                    return response.text().then(text => {
                        try {
                            return JSON.parse(text);
                        } catch (e) {
                            if (text.includes('DOCTYPE html')) {
                                throw new Error('Session expirée. Veuillez vous reconnecter.');
                            } else {
                                console.error('Réponse non-JSON:', text);
                                throw new Error('Format de réponse invalide');
                            }
                        }
                    });
                })
                .then(data => {
                    if (data.success) {
                        // Close modal
                        const modalElement = document.getElementById('commentModal');
                        const modal = bootstrap.Modal.getInstance(modalElement);
                        modal.hide();

                        commentAlert.textContent = 'Commentaire ajouté avec succès!';
                        commentAlert.classList.remove('d-none', 'alert-danger');
                        commentAlert.classList.add('alert-success');

                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        showError(data.message || 'Erreur lors de l\'ajout du commentaire');
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    showError(error.message || 'Une erreur est survenue lors de l\'envoi du commentaire');
                })
                .finally(() => {
                    // Reset button state
                    submitBtn.textContent = originalBtnText;
                    submitBtn.disabled = false;
                });
            });

            function showError(message) {
                commentAlert.textContent = message;
                commentAlert.classList.remove('d-none', 'alert-success');
                commentAlert.classList.add('alert-danger');
            }
        });
    </script>
{% endblock %}